package Collection;

import java.util.*;

public class Main {
    public static void main(String[] args) {

        /*HashSet<Integer> hSet= new HashSet<>(); // Boyut vermeden kullanabildik
        hSet.add(45);
        hSet.add(10);
        hSet.add(25);
        hSet.add(35);
        hSet.remove(35);
        hSet.add(null);

        System.out.println(hSet.isEmpty());
        System.out.println(hSet.contains(25));

        for(Integer sayi:hSet){
            System.out.println(sayi); // girme sırası çıkma sırası garantisi yok
            // ilk igren ilk çıkar vs yok fifo
        }
        Iterator<Integer> itr = hSet.iterator();
        while (itr.hasNext()){
            System.out.println(itr.next());
        }*/

        /*LinkedHashSet<Integer> lHSet=new LinkedHashSet<>();
        lHSet.add(11);
        lHSet.add(32);
        lHSet.add(22);
        lHSet.add(41);

        Iterator<Integer> itr=lHSet.iterator();
        while (itr.hasNext()){
            System.out.println(itr.next());
        }

        TreeSet<Student> studentsa =new TreeSet<>(new OrderGradeComperator().reversed());

        studentsa.add(new Student("omer",95));
        studentsa.add(new Student("ahmet",55));
        studentsa.add(new Student("mustafa",85));
        studentsa.add(new Student("buğra",75));
        studentsa.add(new Student("cenk",80));

        for (Student stu: studentsa){
            System.out.println(stu.getName());
            System.out.println(stu.getNote());
        }*/

        List<Integer> liste=new ArrayList<>();
        liste.add(10);
        liste.add(null);
        liste.add(25);
        liste.add(35);
        liste.add(5);

        //System.out.println(liste); //direk arrayi yazdırabilir

        /*Iterator<Integer> itr =liste.iterator();
        while (itr.hasNext()){
            System.out.println(itr.next());
        }*/
        /*
        System.out.println(liste.size());
        System.out.println("---------------------");
        System.out.println(liste.get(0));// 0. indisi getirir
        //System.out.println(liste.get(100));
        System.out.println("--------------------------------");
        System.out.println(liste.lastIndexOf(15));//yoksa indis -1 veriri
        //System.out.println(liste.remove(2));
        //System.out.println("---------------listeden 2 silinidi");
        System.out.println(liste);
        System.out.println("--------------");
        liste.add(2,15);
        System.out.println("---------------set 2. elemanı yenden başka bişey ver");
        liste.set(2,333);
        System.out.println("----Listeye bişey eklendi oldu--------------");
        System.out.println(liste);
        System.out.println("sublist"+liste.subList(2,5));//2 3 4 ü alır 5 i almaz

        Object[] objectarr=liste.toArray();
        Integer[] in1=liste.toArray(new Integer[0]);
        System.out.println("--------------------yeni array----------\n"+in1[0]);
        for (Integer element: liste){
            System.out.println(element);
        }

        //liste.clear();
        // System.out.println("temiz liste\n"+liste); [] verir.*/

        /*

        List<String> listeL = new LinkedList<>();// lisetnin başına sonuna değer eklerken kolay
        // aradaki bağı kopar oraya koy iki elemanın baş ve sonu değişti 3li tutar linked listler
        listeL.add("Omer");
        listeL.add("Prof");
        listeL.add("Omer");
        listeL.add("Cenan");
        listeL.add("123");

        //listeL.remove("Omer");
        listeL.remove(4);

        Iterator<String> itr3= listeL.iterator();

        while (itr3.hasNext()){
            System.out.println(itr3.next());

        }*/

        /*

        // queue fifo ilk giren ilk çıkar
        // Polimorphism
        Queue<String> q= new LinkedList<>();// q gibi davranır
        q.add("Omer");
        q.add("kartlı hata varsa add de exception dönem");
        q.offer("eklemede hata mı var varsa null döneyim ");

        //q.remove(); q.poll(); aynı
        q.remove("Omer");
        //q.remove(0); kuyruklarda index no yok object var

        Iterator<String> itq= q.iterator();

        while (itq.hasNext()){
            System.out.println(itq.next());

        }
        */

        //Priority Öncelik queue tipi
        PriorityQueue<String> pq=new PriorityQueue<>(new Comparator<String>() {
            @Override
            public int compare(String osr1, String osr2) {
                return osr1.compareTo(osr2);
            }
        }.reversed() );//sıralar ascii table göre

        pq.add("Omer");
        pq.add("Kartlı");
        pq.add("1235");
        //pq.remove("1235");
        System.out.println(pq.poll());

        Iterator<String> spq= pq.iterator();
        while (spq.hasNext()){
            System.out.println(spq.next());
        }

    }
}
